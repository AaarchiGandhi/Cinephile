{"ast":null,"code":"import { MatAutocompleteModule } from '@angular/material/autocomplete';\nimport { CommonModule } from '@angular/common';\nimport { EventEmitter, Component, forwardRef, ViewChild, Input, Output, NgModule } from '@angular/core';\nimport { NG_VALUE_ACCESSOR, FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { MatRippleModule } from '@angular/material/core';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nclass AbstractControlValueAccessor {\n  constructor() {\n    /**\n     * Invoked when the model has been changed\n     */\n    this.onChange = _ => {};\n    /**\n     * Invoked when the model has been touched\n     */\n    this.onTouched = () => {};\n  }\n  /**\n   * Method that is invoked on an update of a model.\n   */\n  updateChanges() {\n    this.onChange(this.value);\n  }\n  /**\n   * Writes a new item to the element.\n   * @param value the value\n   */\n  writeValue(value) {\n    this.value = value;\n    this.updateChanges();\n  }\n  /**\n   * Registers a callback function that should be called when the control's value changes in the UI.\n   * @param fn\n   */\n  registerOnChange(fn) {\n    this.onChange = fn;\n  }\n  /**\n   * Registers a callback function that should be called when the control receives a blur event.\n   * @param fn\n   */\n  registerOnTouched(fn) {\n    this.onTouched = fn;\n  }\n}\nvar DISPLAY_TYPE = /*#__PURE__*/function (DISPLAY_TYPE) {\n  DISPLAY_TYPE[DISPLAY_TYPE[\"SIMPLE\"] = 0] = \"SIMPLE\";\n  DISPLAY_TYPE[DISPLAY_TYPE[\"FORMCONTROL\"] = 1] = \"FORMCONTROL\";\n  DISPLAY_TYPE[DISPLAY_TYPE[\"AUTOCOMPLETE\"] = 2] = \"AUTOCOMPLETE\";\n  DISPLAY_TYPE[DISPLAY_TYPE[\"FORMCONTROLANDAUTOCOMPLETE\"] = 3] = \"FORMCONTROLANDAUTOCOMPLETE\";\n  return DISPLAY_TYPE;\n}(DISPLAY_TYPE || {});\nclass MatSearchBarComponent extends AbstractControlValueAccessor {\n  constructor() {\n    super(...arguments);\n    this.DISPLAY_TYPE = DISPLAY_TYPE;\n    this.appearance = 'standard';\n    this.placeholder = '';\n    this.alwaysOpen = false;\n    this.onBlur = new EventEmitter();\n    this.onClose = new EventEmitter();\n    this.onEnter = new EventEmitter();\n    this.onFocus = new EventEmitter();\n    this.onOpen = new EventEmitter();\n    this.searchVisible = false;\n  }\n  ngOnInit() {\n    if (!this.formControl && !this.matAutocomplete) this.mode = DISPLAY_TYPE.SIMPLE;else if (this.formControl && this.matAutocomplete) this.mode = DISPLAY_TYPE.FORMCONTROLANDAUTOCOMPLETE;else if (this.formControl) this.mode = DISPLAY_TYPE.FORMCONTROL;else if (this.matAutocomplete) this.mode = DISPLAY_TYPE.AUTOCOMPLETE;\n    if (this.alwaysOpen) {\n      this.searchVisible = true;\n    }\n  }\n  close() {\n    if (!this.alwaysOpen) {\n      this.searchVisible = false;\n    }\n    this.value = '';\n    this.updateChanges();\n    this.onClose.emit();\n  }\n  open() {\n    this.searchVisible = true;\n    this.inputElement.nativeElement.focus();\n    this.onOpen.emit();\n  }\n  onBlurring(searchValue) {\n    if (!searchValue && !this.alwaysOpen) {\n      this.searchVisible = false;\n    }\n    this.onBlur.emit(searchValue);\n  }\n  onEnterring(searchValue) {\n    this.onEnter.emit(searchValue);\n  }\n  onFocussing(searchValue) {\n    this.onFocus.emit(searchValue);\n  }\n}\nclass NgMatSearchBarModule {}\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { NgMatSearchBarModule, MatSearchBarComponent as ɵa, AbstractControlValueAccessor as ɵb };\n//# sourceMappingURL=ng-mat-search-bar.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}